/**
 * Flow types corresponding to the TS types in `@types/react-native`.
 *
 * TsFlower will rewrite some TS references to React Native types
 * so that their Flow versions refer instead to these types.
 *
 * @flow
 */

import * as React from 'react';

// Actual RN doesn't export this, but see definition in
// react-native/Libraries/StyleSheet/StyleSheetTypes.js
// of GenericStyleProp.
export type StyleProp<+T> =
  | null
  | void
  | T
  | false
  | ''
  | $ReadOnlyArray<StyleProp<T>>;

// Types exported by RN's StyleSheet.js.
export type {
  ColorValue,
  ViewStyle,
  TextStyle,
  ImageStyle,
} from 'react-native/Libraries/StyleSheet/StyleSheet';

//
// Event types.
//
// Individual concrete events. For the conduits that events generically can
// be passed around on, see the next section.
//

export type {
  // TODO: add the rest of the event types defined in `@types/react-native`
  //   (this is just what came up in one version of the integration suite)
  PressEvent as GestureResponderEvent,
  LayoutEvent as LayoutChangeEvent,
  SyntheticEvent as NativeSyntheticEvent,
} from 'react-native/Libraries/Types/CoreEventTypes';

//
// Event emitter/subscription types.
//
// The conduits that events generically can be passed around on. For
// individual concrete events, see the previous section.
//

// In real RN, this takes type params, so you can give a list of valid event
// names it should know about:
//
//   class EmitterSubscription<EventDefinitions: {...}, K: $Keys<EventDefinitions>>
//     extends _EventSubscription<EventDefinitions, K>
//     implements EventSubscription {
//
// Not so in @types/react-native:
//
//   interface EmitterSubscription extends EventSubscription {
//
// It just uses `string` for an event name. So, match that unspecificity by
// choosing unspecific type params.
//
// Separately: Not sure why @types/react-native has this as an `interface`
// with a `new (…)` signature, when real RN has it as a `class`. Seems like
// `class` is more correct; use that.
import _EmitterSubscription from 'react-native/Libraries/vendor/emitter/_EmitterSubscription';
declare export class EmitterSubscription
  extends _EmitterSubscription<{| +[string]: mixed |}, string> {}

// Components and their props types.
import {
  // TODO: add the whole list of RN components (this is just what came up
  //   in one version of the integration suite)
  typeof DrawerLayoutAndroid as _DrawerLayoutAndroid,
  typeof FlatList as _FlatList,
  typeof Pressable as _Pressable,
  typeof ScrollView as _ScrollView,
  typeof Switch as _Switch,
  typeof TextInput as _TextInput,
  typeof Text as _Text,
  typeof TouchableHighlight as _TouchableHighlight,
  typeof TouchableNativeFeedback as _TouchableNativeFeedback,
  typeof TouchableOpacity as _TouchableOpacity,
  typeof TouchableWithoutFeedback as _TouchableWithoutFeedback,
  typeof View as _View,
} from 'react-native';

// `@types/react-native` declares the components as classes, like:
//   declare class ViewComponent extends React.Component<ViewProps> {}
//   declare const ViewBase: Constructor<NativeMethods> & typeof ViewComponent;
//   export class View extends ViewBase {
//
// But in reality they're not classes.  For example:
//   // react-native/Libraries/Components/View/View.js
//   const View: React.AbstractComponent<
//     ViewProps,
//     React.ElementRef<typeof ViewNativeComponent>,
//   > = React.forwardRef((props: ViewProps, forwardedRef) => {
//
//   // react-native/Libraries/Components/View/ViewNativeComponent.js
//   const ViewNativeComponent: HostComponent<Props> =
//     NativeComponentRegistry.get<Props>('RCTView', () =>
//
//   // react-native/Libraries/Renderer/shims/ReactNativeTypes.js
//   export type HostComponent<T> = AbstractComponent<T, $ReadOnly<NativeMethods>>;
//
// Here, we want the types that those TS classes represent as types…
// so the types of the "class instances", i.e. of the things you can
// get a ref to.  That's the second type argument to React.AbstractComponent,
// and we can extract it with React.ElementRef.
export type DrawerLayoutAndroid = React.ElementRef<_DrawerLayoutAndroid>;
export type FlatList = React.ElementRef<_FlatList>;
export type Pressable = React.ElementRef<_Pressable>;
export type ScrollView = React.ElementRef<_ScrollView>;
export type Switch = React.ElementRef<_Switch>;
export type TextInput = React.ElementRef<_TextInput>;
export type Text = React.ElementRef<_Text>;
export type TouchableHighlight = React.ElementRef<_TouchableHighlight>;
export type TouchableNativeFeedback =
  React.ElementRef<_TouchableNativeFeedback>;
export type TouchableOpacity = React.ElementRef<_TouchableOpacity>;
export type TouchableWithoutFeedback =
  React.ElementRef<_TouchableWithoutFeedback>;
export type View = React.ElementRef<_View>;

// Note we don't translate these to refer directly to the actual props
// types from RN.  Those are exact object types, whereas the ones in
// `@types/react-native` (like all TS object types) are inexact.  And
// RN-using TS code often relies on that, by making intersections as a
// way of adding more properties.
type InexactProps<C> = { ...React.ElementConfig<C>, ... };
export type DrawerLayoutAndroidProps = InexactProps<_DrawerLayoutAndroid>;
export type FlatListProps = InexactProps<_FlatList>;
export type PressableProps = InexactProps<_Pressable>;
export type ScrollViewProps = InexactProps<_ScrollView>;
export type SwitchProps = InexactProps<_Switch>;
export type TextInputProps = InexactProps<_TextInput>;
export type TextProps = InexactProps<_Text>;
export type TouchableHighlightProps = InexactProps<_TouchableHighlight>;
export type TouchableNativeFeedbackProps =
  InexactProps<_TouchableNativeFeedback>;
export type TouchableOpacityProps = InexactProps<_TouchableOpacity>;
export type TouchableWithoutFeedbackProps =
  InexactProps<_TouchableWithoutFeedback>;
export type ViewProps = InexactProps<_View>;

// Miscellaneous types related to particular components.
export type { StatusBarAnimation } from 'react-native/Libraries/Components/StatusBar/StatusBar';

//
// Animation types.
//
// NB these go under the `Animated` namespace; the rewriter code that has a
// list of what names to find in this file just knows that.
// TODO: Express that better within this file.

// TODO: Add the whole list of animated components.
import AnimatedAddition from 'react-native/Libraries/Animated/nodes/AnimatedAddition';
export { AnimatedAddition };
import AnimatedInterpolation from 'react-native/Libraries/Animated/nodes/AnimatedInterpolation';
export { AnimatedInterpolation };

export type { AnimationConfig } from 'react-native/Libraries/Animated/animations/Animation';
export type { DecayAnimationConfig } from 'react-native/Libraries/Animated/animations/DecayAnimation';
export type { SpringAnimationConfig } from 'react-native/Libraries/Animated/animations/SpringAnimation';
export type { TimingAnimationConfig } from 'react-native/Libraries/Animated/animations/TimingAnimation';

// @types/react-native has:
//    export type WithAnimatedValue<T> = T extends Builtin | Nullable
//        ? T
//        : T extends Primitive
//        ? T | Value | AnimatedInterpolation // add `Value` and `AnimatedInterpolation` but also preserve original T
//        : T extends Array<infer P>
//        ? WithAnimatedArray<P>
//        : T extends {}
//        ? WithAnimatedObject<T>
//        : T; // in case it's something we don't yet know about (for .e.g bigint)
//
//    type NonAnimatedProps = 'key' | 'ref';
//
//    type TAugmentRef<T> = T extends React.Ref<infer R> ? React.Ref<R | LegacyRef<R>> : never;
//
//    export type AnimatedProps<T> = {
//        [key in keyof T]: key extends NonAnimatedProps
//            ? key extends 'ref'
//                ? TAugmentRef<T[key]>
//                : T[key]
//            : WithAnimatedValue<T[key]>;
//    };
//
//    export interface AnimatedComponent<T extends React.ComponentType<any>>
//        extends React.FC<AnimatedProps<React.ComponentPropsWithRef<T>>> {}
//
// So the job of WithAnimatedValue is to turn an individual prop's type on
// the underlying component to its type on the animated component.
//
// In actual RN, this is... `any`.  Here's the definition:
//   // react-native/Libraries/Animated/createAnimatedComponent.js
//   export type AnimatedComponentType<
//     Props: {+[string]: mixed, ...},
//     Instance,
//   > = React.AbstractComponent<
//     $ObjMap<
//       Props &
//         $ReadOnly<{
//           passthroughAnimatedPropExplicitValues?: React.ElementConfig<
//             typeof View,
//           >,
//         }>,
//       () => any,
//     >,
//     Instance,
//   >;
// So it (a) adds one prop, and (b) turns all the props to `any`.
export type WithAnimatedValue<Props> = any;
